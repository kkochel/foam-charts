apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "c4gh-file-service.fullname" . }}
  labels:
    {{- include "c4gh-file-service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "c4gh-file-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "c4gh-file-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "c4gh-file-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: BROKER_HOST
              value: {{ required "A Rabbit MQ host is required" .Values.broker.host | quote }}
            - name: BROKER_PORT
              value: {{ required "A Rabbit MQ port is required" .Values.broker.port | quote }}
            - name: BROKER_USERNAME
              value: {{ required "A Rabbit MQ username is required" .Values.broker.username | quote }}
            - name: BROKER_PASSWORD
              value: {{ required "A Rabbit MQ password is required" .Values.broker.password | quote }}
            - name: BROKER_VHOST
              value: {{ required "A Rabbit MQ vhost is required" .Values.broker.vhost | quote }}
            - name: BROKER_SSL
              value: {{ required "Is communnication with broker use TLS" .Values.broker.tls.enabled | quote }}
            - name: KEYSTORE_PATH
              value: {{ .Values.broker.tls.keystore.path | quote }}
            - name: KEYSTORE_TYPE
              value: {{ required "Type of keystore" .Values.broker.tls.keystore.type | quote }}
            - name: KEYSTORE_PASSWORD
              value: {{ required "Password to keystore" .Values.broker.tls.keystore.password | quote }}
            - name: C4GH_PRIVATE_KEY
              value: {{ required "Password to keystore" .Values.crypt4gh.private_key_path | quote }}
            - name: C4GH_PRIVATE_KEY_PASSWORD
              value: {{ required "Password to keystore" .Values.crypt4gh.private_key_password | quote }}
            - name: OUTBOX_TYPE
              value: {{ required "Type of outbox" .Values.outbox.type | quote }}
            - name: OUTBOX_PATH
              value: {{ required "Outbox path" .Values.outbox.path | quote }}
            - name: ARCHIVE_TYPE
              value: {{ required "Type of archive" .Values.archive.type | quote }}
            - name: ARCHIVE_PATH
              value: {{ required "Path value or s3 bucket name" .Values.archive.path | quote }}
          {{- if eq "s3" .Values.archive.type }}
            - name: S3_ENDPOINTE
              value: {{ required "Endpoint of s3 server" .Values.archive.s3.endpoint | quote }}
            - name: S3_ACCESS_KEY
              value: {{ required "S3 access key" .Values.archive.s3.accessKey | quote }}
            - name: S3_SECRET_KEY
              value: {{ required "S3 secret key" .Values.archive.s3.secretKey | quote }}
          {{- end }}
{{/*          ports:*/}}
{{/*            - name: http*/}}
{{/*              containerPort: 80*/}}
{{/*              protocol: TCP*/}}
{{/*          livenessProbe:*/}}
{{/*            httpGet:*/}}
{{/*              path: /*/}}
{{/*              port: http*/}}
{{/*          readinessProbe:*/}}
{{/*            httpGet:*/}}
{{/*              path: /*/}}
{{/*              port: http*/}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{/*volumeMounts*/}}
          volumeMounts:
            - name: java-cacert
              mountPath: "/etc/ssl/certs/java"
            - name: java-keystore
              mountPath: "/keystore"
            - mountPath: c4gh
              name: "/c4gh"
          {{- if eq "posix" .Values.archive.type }}
            - name: archive
              mountPath: {{ .Values.archive.path }}
          {{- end}}
          {{- if eq "posix" .Values.outbox.type }}
            - name: outbox
              mountPath: {{ .Values.outbox.path }}
          {{- end}}
          {{/*end volumeMounts*/}}
      {{/*volumes*/}}
      volumes:
        - name: java-cacert
          secret:
            secretName: {{ required "Name of secret containg Java cacert" .Values.secrets.java | quote }}
        - name: java-keystore
          secret:
            secretName: {{ required "Name of secret containg Java keystore" .Values.secrets.keystore | quote }}
        - name: c4gh
          secret:
            secretName: {{ required "Name of secret containg C4GH files" .Values.secrets.c4gh | quote }}
      {{- if eq "posix" .Values.archive.type }}
        - name: archive
          persistentVolumeClaim:
            claimName: {{ .Values.archive.pvClaim }}
      {{- end}}
      {{- if eq "posix" .Values.outbox.type }}
        - name: outbox
          persistentVolumeClaim:
            claimName: {{ .Values.outbox.pvClaim }}
      {{- end}}
      {{/*end volumes*/}}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
